{"version":3,"sources":["enums/UrlApiEnum.tsx","config.tsx","enums/HttpMethodEnum.tsx","api/RestHelper.tsx","api/DefaultAdminApi.tsx","api/Employes/EmployesApi.tsx","enums/ActionTypeEnum.tsx","stores/employes/employesAction.tsx","enums/ExplorerListEnum.tsx","stores/employes/employesBusinessAction.tsx","components/Table/Table.tsx","contents/App.tsx","stores/employes/employesState.tsx","stores/explorer/explorerState.tsx","stores/index.tsx","index.tsx"],"names":["UrlApiEnum","Object","freeze","EMPLOYES","config","SERVICE_URL","HttpMethodEnum","GET","POST","DELETE","PATCH","PUT","RestHelper","callApi","a","payload","data","method","params","route","serviceUrl","url","response","axios","then","catch","error","BASE_URL","getDataAll","assign","getDataById","id","result","DefaultAdminApi","deleteItems","patchItem","postItem","putItem","UrlApiEnums","EmployesApi","deleteById","ExplorerActionTypeEnum","ADD_EXPLORER_STATE","UPDATE_EXPLORER_STATE","UPDATE_EXPLORER_STATE_BY_KEY","REMOVE_EXPLORER_STATE","RESET_EXPLORER_STATE","EmployesActionTypeEnum","ADD_ITEM","SET_ITEM","SET_ITEM_BY_KEY","RESET","RESTORE","addItem","item","type","restoreData","ExplorerListEnum","employesState","getExplorerData","dispatch","getState","explorerState","getFetchData","employesAction","name","email","position","Table","props","columnData","onClickNew","onChangePageIndex","paginationConf","usePagination","columnDataVisible","useMemo","filter","hidden","pageIndex","pageSize","gridStyleLocal","style","lengthVisible","i","length","className","gridTemplateColumns","map","idx","icon","label","newData","start","max","itemContent","borderLeft","key","renderBody","onClick","countPagination","Math","ceil","itemPaginations","push","renderPagination","defaultProps","React","memo","connect","state","employesBusinessAction","bindActionCreators","employesBusinessActionImp","useState","counter","setCounter","pageOptionSize","setPaginationConf","toJS","initialState","List","initialDataExplorer","values","value","combineReducers","action","index","findIndex","update","store","createStore","rootStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a92e30c5.chunk.js","sourcesContent":["const UrlApiEnum = Object.freeze({\r\n    EMPLOYES: 'employes',\r\n})\r\n\r\nexport default UrlApiEnum;\r\n","const config = Object.freeze({\r\n    SERVICE_URL: 'https://60a4f8dafbd48100179dd713.mockapi.io/api/v1/'\r\n})\r\n\r\nexport default config;","const HttpMethodEnum = Object.freeze({\r\n    GET: 'GET',\r\n    POST: 'POST',\r\n    DELETE: 'DELETE',\r\n    PATCH: 'PATCH',\r\n    PUT: 'PUT',\r\n});\r\n\r\nexport default HttpMethodEnum;\r\n","import axios from 'axios';\r\n\r\nclass RestHelper {\r\n    // params for get method\r\n    // data for other than get method\r\n    static callApi = async (payload: any = {\r\n        data: null, \r\n        method: null, \r\n        params: null,\r\n        route: null, \r\n        serviceUrl: null, \r\n    }) => {\r\n        const {\r\n            data, \r\n            method,\r\n            params, \r\n            route, \r\n            serviceUrl, \r\n        } = payload;\r\n        const url = serviceUrl + route\r\n        let response = null\r\n        await axios({\r\n            method: method,\r\n            url: url,\r\n            data: data,\r\n            params: params,\r\n        })\r\n        .then((data) => {\r\n            // data.headers.xPagination = data.headers['x-pagination'] ? JSON.parse(data.headers['x-pagination']) : null;\r\n            response = data\r\n        })\r\n        .catch((error) => error.response ? response = error.response : response = error)\r\n        return response;\r\n\r\n    }\r\n}\r\n\r\nexport default RestHelper;\r\n","import config from '../config'\r\nimport HttpMethodEnum from '../enums/HttpMethodEnum'\r\nimport RestHelper from './RestHelper'\r\n\r\nconst BASE_URL = `${config.SERVICE_URL}`\r\n\r\nconst getDataAll = async ({\r\n    url = \"\", \r\n    payload = {\r\n        data: null, \r\n        params: null, \r\n    }\r\n}) => {\r\n    payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.GET,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        },\r\n        payload\r\n    )\r\n    return await RestHelper.callApi(payload);\r\n}\r\n\r\nconst getDataById = async ({\r\n    url = \"\", \r\n    payload = {\r\n        id: 0, \r\n        data: null, \r\n        params: null\r\n    }\r\n}) => {\r\n    payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.GET,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        },\r\n        payload\r\n    )\r\n    const result = await RestHelper.callApi(payload)\r\n    return result\r\n}\r\n\r\nconst deleteItems = async ({\r\n    url = \"\", \r\n}) => {\r\n    const payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.DELETE,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        }\r\n    )\r\n    const result = await RestHelper.callApi(payload)\r\n    return result\r\n}\r\n\r\nconst patchItem = async ({\r\n    url = \"\", \r\n    payload = {\r\n        id: 0, \r\n        data: null, \r\n        params: null,\r\n    }\r\n}) => {\r\n    payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.PATCH,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        },\r\n        payload\r\n    )\r\n    const result = await RestHelper.callApi(payload)\r\n    return result\r\n}\r\n\r\nconst postItem = async ({\r\n    url = \"\", \r\n    payload = {\r\n        id: 0, \r\n        data: null, \r\n        params: null\r\n    }\r\n}) => {\r\n    payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.POST,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        },\r\n        payload\r\n    )\r\n    const result = await RestHelper.callApi(payload)\r\n    return result\r\n}\r\n\r\nconst putItem = async ({\r\n    url = \"\",\r\n    payload = {\r\n        id: 0, \r\n        data: null, \r\n        params: null,\r\n    }\r\n}) => {\r\n    payload = Object.assign({}, \r\n        {\r\n            method: HttpMethodEnum.PUT,\r\n            serviceUrl: BASE_URL,\r\n            route: url\r\n        },\r\n        payload\r\n    )\r\n    const result = await RestHelper.callApi(payload)\r\n    return result\r\n}\r\n\r\nconst DefaultAdminApi = {\r\n    deleteItems,\r\n    getDataAll,\r\n    getDataById,\r\n    patchItem,\r\n    postItem,\r\n    putItem,\r\n}\r\n\r\nexport default DefaultAdminApi\r\n","import UrlApiEnums from '../../enums/UrlApiEnum'\r\nimport DefaultAdminApi from \"../DefaultAdminApi\"\r\n\r\nconst getDataAll = async () => {\r\n    const url = UrlApiEnums.EMPLOYES\r\n    const result: any= await DefaultAdminApi.getDataAll({url: url});\r\n    return result;\r\n}\r\n\r\nconst getDataById = async (payload = {id: 0, data: null, params: null}) => {\r\n    const url = `${UrlApiEnums.EMPLOYES}/${payload.id}`\r\n    return await DefaultAdminApi.getDataById({url: url, payload})\r\n}\r\n\r\nconst deleteById = async (payload = { id: 0}) => {\r\n    const url = `${UrlApiEnums.EMPLOYES}/${payload.id}`\r\n    return await DefaultAdminApi.deleteItems({url: url})\r\n}\r\n\r\nconst patchItem = async (payload = {id: 0, data: null, params: null}) => {\r\n    const url = `${UrlApiEnums.EMPLOYES}/${payload.id}`\r\n    return await DefaultAdminApi.patchItem({url: url, payload})\r\n}\r\n\r\nconst postItem = async (payload: any = {id: 0, data: null, params: null}) => {\r\n    const url = `${UrlApiEnums.EMPLOYES}`\r\n    const result: any = await DefaultAdminApi.postItem({url: url, payload})\r\n    return result;\r\n}\r\n\r\nconst putItem = async (payload = {id: 0, data: null, params: null}) => {\r\n    const url = `${UrlApiEnums.EMPLOYES}/${payload.id}`\r\n    return await DefaultAdminApi.putItem({url: url, payload})\r\n}\r\n\r\nconst EmployesApi = {\r\n    deleteById,\r\n    getDataAll,\r\n    getDataById,\r\n    patchItem,\r\n    postItem,\r\n    putItem,\r\n}\r\n\r\nexport default EmployesApi\r\n","export const ExplorerActionTypeEnum = Object.freeze({\r\n    ADD_EXPLORER_STATE: 'ExplorerActionTypeEnum/ADD_EXPLORER_STATE',\r\n    UPDATE_EXPLORER_STATE: 'ExplorerActionTypeEnum/UPDATE_EXPLORER_STATE',\r\n    UPDATE_EXPLORER_STATE_BY_KEY: 'ExplorerActionTypeEnum/UPDATE_EXPLORER_STATE_BY_KEY',\r\n    REMOVE_EXPLORER_STATE: 'ExplorerActionTypeEnum/REMOVE_EXPLORER_STATE',\r\n    RESET_EXPLORER_STATE: 'ExplorerActionTypeEnum/RESET_EXPLORER_STATE',\r\n})\r\n\r\nexport const EmployesActionTypeEnum = Object.freeze({\r\n    ADD_ITEM: 'EmployesActionTypeEnum/ADD_ITEM',\r\n    SET_ITEM: 'EmployesActionTypeEnum/SET_ITEM',\r\n    SET_ITEM_BY_KEY: 'EmployesActionTypeEnum/SET_ITEM_BY_KEY',\r\n    RESET: 'EmployesActionTypeEnum/RESET',\r\n    RESTORE: 'EmployesActionTypeEnum/RESTORE',\r\n})","import { EmployesActionTypeEnum } from '../../enums/ActionTypeEnum';\r\nimport { IDataItemKey } from '../../interface';\r\nimport { IDataEmployes } from './employesState';\r\n\r\nexport const addItem = (item: IDataEmployes) => ({\r\n    type: EmployesActionTypeEnum.ADD_ITEM, item,\r\n});\r\n\r\nexport const setItem = (Id = 0, data = {}) => ({\r\n    type: EmployesActionTypeEnum.SET_ITEM, Id, data,\r\n});\r\n\r\nexport const setItemByKey = (data: IDataItemKey = { id: 0, key: '', value: '' }) => ({\r\n    type: EmployesActionTypeEnum.SET_ITEM_BY_KEY, id: data.id, data,\r\n});\r\n\r\nexport const restoreData = (data = {}) => ({\r\n    type: EmployesActionTypeEnum.RESTORE, data,\r\n});\r\n","const ExplorerListEnum = Object.freeze({\r\n    employesState: 'employesState'\r\n})\r\n\r\nexport default ExplorerListEnum;","import EmployesApi from \"../../api/Employes/EmployesApi\";\r\nimport * as employesAction from './employesAction';\r\nimport ExplorerListEnum from \"../../enums/ExplorerListEnum\";\r\nimport { IApiResult } from \"../../interface\";\r\nimport { IDataEmployes } from \"./employesState\";\r\n\r\nexport const getExplorerData = () => (dispatch: any, getState: any) => {\r\n    const state = getState();\r\n    const { explorerState } = state;\r\n    return explorerState[ExplorerListEnum.employesState];\r\n};\r\n\r\nexport const getFetchData = () => async (dispatch: any) => {\r\n    const body = dispatch(getExplorerData());\r\n    const result: IApiResult = await EmployesApi.getDataAll();\r\n    if (result?.data) {\r\n        const { data } = result;\r\n        dispatch(employesAction.restoreData(data));\r\n    }\r\n    // employesAction.restoreData();\r\n};\r\n\r\nexport const addItem = (payload: IDataEmployes = {\r\n    name: '',\r\n    email: '',\r\n    position: '',\r\n}) => async (dispatch: any, getState: any) => {\r\n    /* dispatch(startLoading()) */\r\n    const result: IApiResult = await EmployesApi.postItem({\r\n        data: payload,\r\n    })  \r\n    if (result?.data) {\r\n        const { data } = result;\r\n        dispatch(employesAction.addItem(data));\r\n    }  \r\n};","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Table.scss'\r\n\r\ninterface IColumnData {\r\n    icon: string,\r\n    key: string,\r\n    label: string,\r\n    hidden: boolean,\r\n}\r\n\r\ninterface IPaginationConf {\r\n    pageIndex: number,\r\n    pageSize: number,\r\n    pageOptionSize: number[],\r\n}\r\n\r\ninterface ITable {\r\n    columnData: IColumnData[],\r\n    data: any,\r\n    onClickNew?: Function | any,\r\n    onChangePageIndex?: Function | any,\r\n    paginationConf?: IPaginationConf,\r\n    usePagination?: boolean,\r\n}\r\n\r\nconst Table: React.FC<ITable> = (props) => {\r\n    const {\r\n        columnData,\r\n        data,\r\n        onClickNew,\r\n        onChangePageIndex,\r\n        paginationConf,\r\n        usePagination,\r\n    } = props;\r\n\r\n    const columnDataVisible = useMemo(() => {\r\n        return columnData.filter((item) => item?.hidden !== true)\r\n    }, [columnData])\r\n\r\n    const pageIndex = useMemo(() => {\r\n        return paginationConf?.pageIndex ?? 1\r\n    }, [paginationConf?.pageIndex])\r\n\r\n    const pageSize = useMemo(() => {\r\n        return paginationConf?.pageSize ?? 5\r\n    }, [paginationConf?.pageSize])\r\n\r\n    const gridStyleLocal = useMemo(() => {\r\n        let style = '';\r\n        const lengthVisible = columnDataVisible\r\n        for(let i = 0; i < lengthVisible.length; i ++) {\r\n            style += 'auto ';\r\n        }\r\n        return style;\r\n    }, [columnData.length])\r\n\r\n    const renderHeader = () => {\r\n        const result = (\r\n            columnDataVisible.map((item, idx) => (\r\n                <div \r\n                    className=\"table-header-item\"\r\n                    key={`table-header-item-${idx}`}\r\n                >\r\n                    <div className=\"icon\">{item?.icon}</div>\r\n                    <div className=\"text\">{item?.label}</div>\r\n                </div>\r\n            ))\r\n        )\r\n        return result;\r\n    }\r\n\r\n    const renderItem = (itemContent: any, idxParent: any) => {\r\n        let listShowItem: any = columnDataVisible;\r\n        const result = listShowItem.map((item: any, idx: any) => (\r\n            <div \r\n                className=\"table-item\" \r\n                key={`table-item-${idx}`}\r\n                style={{\r\n                    borderLeft: idx === 0 ? '0px solid' : '',\r\n                }}\r\n            >\r\n                <div className=\"content\">{itemContent[item?.key]}</div>\r\n            </div>\r\n        ))\r\n        return result;\r\n    }\r\n\r\n    const renderBody = () => {\r\n        let newData = [...data];\r\n        if (usePagination) {\r\n            const start = ((pageIndex - 1) * pageSize) + 1;\r\n            const max = start + (pageSize - 1);\r\n            newData = newData.filter((item, idx) => {\r\n                idx = idx + 1;\r\n                if (idx >= start && idx <= max) return true;\r\n                return false;\r\n            })\r\n        }\r\n        return newData.map((item: any, idx: any) => renderItem(item, idx));\r\n    }\r\n\r\n    const renderButtonNew = () => {\r\n        return (\r\n            <div \r\n                className=\"table-new-button\" \r\n                onClick={onClickNew}\r\n                style={{\r\n                    borderLeft: '0',\r\n                }}\r\n            >\r\n                <div className=\"content\">+ New</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderPagination = () => {\r\n        let countPagination: any = data.length / pageSize;\r\n        countPagination = Math.ceil(countPagination);\r\n        let itemPaginations = []\r\n        for(let i = 0; i < countPagination; i ++) itemPaginations.push((\r\n            <div className=\"item-paginations\" onClick={() => onChangePageIndex(i + 1)}>\r\n                {i + 1}\r\n            </div>\r\n        ))\r\n        return (\r\n            <div className=\"container-pagination\">\r\n                <div className=\"content-pagination\">\r\n                    {itemPaginations.map((item) => item)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                className=\"table\"\r\n                style={{\r\n                    gridTemplateColumns: gridStyleLocal,\r\n                }}\r\n            >\r\n                {renderHeader()}\r\n                {renderBody()}\r\n            </div>\r\n            {renderButtonNew()}\r\n            {usePagination && renderPagination()}\r\n        </>\r\n    );\r\n};\r\n\r\nTable.defaultProps = {\r\n    columnData: [],\r\n    data: [],\r\n    onClickNew: () => {},\r\n    onChangePageIndex: () => {},\r\n};\r\n\r\nTable.propTypes = {\r\n    columnData: PropTypes.any,\r\n    data: PropTypes.any,\r\n    onClickNew: PropTypes.func,\r\n    onChangePageIndex: PropTypes.func,\r\n};\r\n\r\nexport default React.memo(Table);\r\n","import React, { useMemo, useState } from \"react\";\r\nimport * as employesBusinessActionImp from \"../stores/employes/employesBusinessAction\";\r\nimport Table from '../components/Table/Table'\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { IStateList } from \"../interface\";\r\nimport \"./App.scss\";\r\n// props\r\n// hooks\r\n// render props\r\n\r\nconst mapStateToProps = (state: IStateList) => {\r\n  return {\r\n    employesState: state.employesState,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    employesBusinessAction: bindActionCreators(employesBusinessActionImp, dispatch),\r\n  }\r\n}\r\n\r\ninterface IApp {\r\n  employesBusinessAction: any,\r\n  employesState: any,\r\n}\r\n\r\nconst App: React.FC<IApp> = ({\r\n  employesBusinessAction,\r\n  employesState,\r\n}) => {\r\n  const [counter, setCounter] = useState(0)\r\n  const [paginationConf, setPaginationConf] = useState({\r\n    pageIndex: 1,\r\n    pageSize: 5,\r\n    pageOptionSize: [5, 10, 20]\r\n  })\r\n  useMemo(() => {\r\n    employesBusinessAction.getFetchData();\r\n  }, [])\r\n\r\n  const columnData = useMemo(() => {\r\n    return [\r\n      {\r\n        icon: 'i',\r\n        key: 'name',\r\n        label: 'Name',\r\n        hidden: false,\r\n      },\r\n      {\r\n        icon: '@',\r\n        key: 'email',\r\n        label: 'Email',\r\n        hidden: false,\r\n      },\r\n      {\r\n        icon: '@',\r\n        key: 'position',\r\n        label: 'Position',\r\n        hidden: false,\r\n      },\r\n    ]\r\n  }, [])\r\n\r\n  const onClickNew = () => {\r\n    employesBusinessAction.addItem({\r\n      name: `name add ${counter}`,\r\n      email: `email${counter}@gmail.com`,\r\n      position: `head position ${counter}`,\r\n    })\r\n    setCounter(counter + 1)\r\n  }\r\n\r\n  const resetCounter = () => {\r\n    setCounter(0);\r\n  }\r\n\r\n  const onChangePageIndex = (pageIndex: number) => {\r\n    setPaginationConf({\r\n      ...paginationConf,\r\n      pageIndex,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"reset-counter\">\r\n        <div className=\"info\">\r\n          Counter: {counter}\r\n        </div>\r\n        <button\r\n          onClick={resetCounter}\r\n        >\r\n          Reset Counter\r\n        </button>\r\n      </div>\r\n      <Table \r\n        columnData={columnData}\r\n        data={employesState?.toJS()}\r\n        onClickNew={onClickNew}\r\n        onChangePageIndex={onChangePageIndex}\r\n        paginationConf={paginationConf}\r\n        usePagination={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { EmployesActionTypeEnum } from '../../enums/ActionTypeEnum';\r\nimport { List } from 'immutable';\r\n\r\nlet initialState = List([]);\r\n\r\nexport interface IDataEmployes {\r\n    id?: any,\r\n    name: any,\r\n    email: any,\r\n    position: any,\r\n} \r\nconst dataEmployes: IDataEmployes = {\r\n    id: 0,\r\n    name: '',\r\n    email: '',\r\n    position: '',\r\n}\r\n\r\nexport default function employesState(state: any = initialState, action: any) {\r\n    let index;\r\n    let newState;\r\n    switch (action.type) {\r\n        case EmployesActionTypeEnum.ADD_ITEM:\r\n            return state.push(Object.assign({}, action.item));\r\n        case EmployesActionTypeEnum.SET_ITEM:\r\n            index = state.findIndex((item: IDataEmployes) => item.id === action.id);\r\n            if (index === -1) return state;\r\n            newState = state.update(index, () => action.data);\r\n            return newState;\r\n\r\n        case EmployesActionTypeEnum.SET_ITEM_BY_KEY:\r\n            index = state.findIndex((item: IDataEmployes) => item.id === action.id);\r\n            if (index === -1) return state;\r\n            newState = state.update(index, (item: IDataEmployes) => ({\r\n                ...item,\r\n                [action.data.key]: action.data.value,\r\n            }));\r\n            return newState;\r\n\r\n        case EmployesActionTypeEnum.RESET:\r\n            return initialState;\r\n        case EmployesActionTypeEnum.RESTORE:\r\n            return List(action.data);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { ExplorerActionTypeEnum } from '../../enums/ActionTypeEnum';\r\nimport ExplorerListEnum from '../../enums/ExplorerListEnum';\r\n\r\nexport const initialDataExplorer = {\r\n    pageIndex: 1,\r\n    pageSize: 5,\r\n};\r\n\r\nlet initialState = {};\r\n// initial data to initialState variable\r\nObject.values(ExplorerListEnum).map(\r\n    (value: any) => {\r\n        initialState = { ...initialState, [value]: initialDataExplorer };\r\n        return initialState;\r\n    },\r\n);\r\n\r\nexport default function explorerState(state: any = initialState, action: any) {\r\n    switch (action.type) {\r\n        case ExplorerActionTypeEnum.ADD_EXPLORER_STATE:\r\n            return { ...state, [action.name]: action.state };\r\n        case ExplorerActionTypeEnum.UPDATE_EXPLORER_STATE_BY_KEY:\r\n            return { \r\n                ...state,\r\n                [action.name]: { \r\n                    ...state[action.name], \r\n                    [action.key]: action.value\r\n                } \r\n            };\r\n        case ExplorerActionTypeEnum.REMOVE_EXPLORER_STATE:\r\n            return { ...state, [action.name]: null };\r\n        case ExplorerActionTypeEnum.RESET_EXPLORER_STATE:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\n// New ------------------------------------------------------\r\nimport employesState from './employes/employesState';\r\nimport explorerState from './explorer/explorerState';\r\n\r\nexport default combineReducers({\r\n    explorerState,\r\n    employesState,\r\n});\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport App from './contents/App';\r\nimport rootStore from './stores';\r\n\r\nconst store = process.env.NODE_ENV === 'production' ? createStore(rootStore, applyMiddleware(thunk)) : createStore(rootStore, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    // eslint-disable-next-line comma-dangle\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}